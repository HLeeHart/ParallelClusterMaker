#!/bin/bash
#
################################################################################
# Name:         sbatch-hashtest.JOBCOUNT.{{ cluster_name }}.sh
# Author:       Rodney Marable <rodney.marable@gmail.com>
# Created On:   May 8, 2019
# Last Changed: May 8, 2019
# Deployed On:  {{ lookup('pipe','date \"+%B %-d, %Y\"') }}
# Purpose:      Custom sbatch submission script for bang.sh and hashtest.py
################################################################################

# Set the name of the cluster job.
#SBATCH --job-name=slurm_hashtest

# Set the maximum execution time to 2 hours.
# Format: D-HH:MM
#SBATCH --time=02:00

# Write job standard output to this file.
# Uncomment the second option to include the jobID.
# Uncomment the third option to include the jobID and taskID (default).
# To write stdout and stderr to the same file, leave the next stanza alone.
##SBATCH --output slurm_hashtest.out
##SBATCH --output slurm_hashtest.job%j.out
#SBATCH --output slurm_hashtest.job%j.task%t.out

# Write job standard error to this file.
# Uncomment the second option to include the jobID.
# Uncomment the third option to include the jobID and taskID.
# To write stdout and stderr to the same file, leave this stanza ALONE.
##SBATCH --error slurm_hashtest.err
##SBATCH --error slurm_hashtest.job%j.err
#SBATCH --error slurm_hashtest.job%j.task%t.err

# Select the number of compute cores.
# Todo - test this!
{% if hyperthreading %}# Hyperthreading is enabled.
{% if compute_instance_type.split('.')[-1] == "large" %}--ntasks=2
{% elif compute_instance_type.split('.')[-1] == "xlarge" %}--ntasks=4
{% elif compute_instance_type.split('.')[-1] == "2xlarge" %}--ntasks=8
{% elif compute_instance_type.split('.')[-1] == "4xlarge" %}--ntasks=16
{% elif compute_instance_type.split('.')[-1] == "9xlarge" %}--ntasks=36
{% elif compute_instance_type.split('.')[-1] == "12xlarge" %}--ntasks=48
{% elif compute_instance_type.split('.')[-1] == "18xlarge" %}--ntasks=72
{% elif compute_instance_type.split('.')[-1] == "24xlarge" %}--ntasks=96
{% else %}#--ntasks=4
{% endif %}
{% else %}# Hyperthreading is disabled.
{% if compute_instance_type.split('.')[-1] == "large" %}--ntasks=1
{% elif compute_instance_type.split('.')[-1] == "xlarge" %}--ntasks=2
{% elif compute_instance_type.split('.')[-1] == "2xlarge" %}--ntasks=4
{% elif compute_instance_type.split('.')[-1] == "4xlarge" %}--ntasks=8
{% elif compute_instance_type.split('.')[-1] == "9xlarge" %}--ntasks=18
{% elif compute_instance_type.split('.')[-1] == "12xlarge" %}--ntasks=24
{% elif compute_instance_type.split('.')[-1] == "18xlarge" %}--ntasks=36
{% elif compute_instance_type.split('.')[-1] == "24xlarge" %}--ntasks=48
{% else %}#--ntasks=2
{% endif %}
{% endif %}

# Reserve 1 CPU per task.
#SBATCH --cpus-per-task=1

# Ensure that all cores are on the same machine.
##SBATCH -N 1                

# Reserve 250MB per core.
##SBATCH --mem-per-cpu=250mb

##########################################################################
##########################################################################
###                      Start the script here                         ###
##########################################################################
##########################################################################

# Set PYTHON3 to the proper binary.
{% if base_os == 'centos7' %}
PYTHON3=/bin/python3.6
{% else %}
PYTHON3=python3
{% endif %}

# Compute the hashes against varying input sizes.
# Large COUNT values will take longer and have more of an effect on total test
# time than SIZE values:
#       - 1000 x 1 Mbyte takes about 1 minute.
#       - 2000 x 64 Kbytes takes about 2 minutes.
#       - 3000 x 32 bytes takes about 10 minutes.

for COUNT in 100 500 1000 2000
do
        for SIZE in 4096 16384 65536 262144 524288
        do
                echo "Making $COUNT hashes with input_size = $SIZE bytes @ `date`"
                $PYTHON3 hashtest.py -c $COUNT -S $SIZE -O $JOB_NAME.${JOB_ID}.task${SGE_TASK_ID}.${SIZE}bytes.log -C pigz
                echo "Finished making hashes of input_size = $SIZE bytes @ `date`"
         echo ""
        done
done

# Exit successfully.
exit 0
