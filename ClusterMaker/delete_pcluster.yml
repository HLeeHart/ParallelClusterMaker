################################################################################
# Name:		delete_pcluster.yml
# Author:	Rodney Marable <rodney.marable@gmail.com>
# Created On:	February 20, 2019
# Last Changed:	May 17, 2019
# Purpose:	Ansible playbook to delete ParallelCluster stacks
################################################################################

---

- name: Delete an existing ParallelCluster stack
  hosts: local
  connection: local
  gather_facts: false
  vars:
    - local_homedir: "{{ lookup('env','HOME') }}"
    - local_workingdir: "{{ lookup('pipe','pwd') }}"
  vars_files:
    - vars_files/{{ cluster_name }}.yml

  tasks:
    - name: Start a timer for the cluster deletion process
      command: date +%Y-%m-%d\ \@\ %H:%M:%S
      register: start_delete_timer

    - debug:
         msg: "Destroying {{ cluster_name }} on {{ start_delete_timer.stdout }}"

    - name: Delete the ParallelCluster stack
      command: pcluster delete --config {{ cluster_config_template }} --region {{ region }} {{ cluster_name }}
      ignore_errors: yes

    - name: Start a timer for the cluster self-terminating Lambda function
      command: date +%Y-%m-%d\ \@\ %H:%M:%S
      register: start_delete_lambda_timer

    - debug:
         msg: "Removing the terminate_pcluster Lambda function on {{ start_delete_lambda_timer.stdout }}"

    - name: Delete the IAM policy associated with the self-terminating Lambda function for this cluster
      iam_policy:
        iam_name: "{{ item.role }}"
        iam_type: role
        policy_name: "{{ item.policy }}"
        state: absent
      ignore_errors: yes
      with_items:
        - policy: terminate-pcluster-policy-{{ cluster_serial_number }}
        - role: terminate-pcluster-role-{{ cluster_serial_number }}

    - name: Delete the IAM role associated with the self-terminating Lambda function for this cluster
      iam:
        name: "{{ item.role }}"
        iam_type: role
        state: absent
      ignore_errors: yes
      with_items:
        - role: terminate-pcluster-role-{{ cluster_serial_number }}

    - name: Delete the cluster self-terminating Lambda function stage directory 
      serverless:
        service_path: "{{ serverless_stage_dir }}"
        state: absent
      ignore_errors: yes
      when: 'debug_mode == "false"'

    - name: Delete the cluster self-terminating Lambda function stage directory with verbose mode engaged
      serverless:
        service_path: "{{ serverless_stage_dir }}"
        state: absent
        verbose: True
      ignore_errors: yes
      when: 'debug_mode == "true"'

    - name: Stop the terminate_cluster Lambda function timer
      command: date +%Y-%m-%d\ \@\ %H:%M:%S
      register: stop_delete_lambda_timer

    - name: Delete the EC2 keypair associated with this cluster
      ec2_key:
        name: "{{ ec2_keypair }}"
        region: "{{ region }}"        
        state: absent
      register: ec2_private_key

    - name: Delete the SSH private key associated with this cluster
      file:
        path: "{{ ssh_keypair }}"
        state: absent
      when: ec2_private_key.changed

    - name: Get facts about the EFS file system associated with this cluster
      efs_facts:
        tags:
          ClusterSerialNumber: "{{ cluster_serial_number }}"
      register: EFS_PCLUSTER
      when: delete_efs == "true" and efs_temp_dir is defined

    - debug: msg="{{ EFS_PCLUSTER }}"

    - name: Create efs_temp_dir
      file:
        path: "{{ efs_temp_dir }}"
        state: directory
      when: delete_efs == "true" and efs_temp_dir is defined

    - name: Dump the EFS file system mountpoint to a temp file
      local_action: copy content={{ EFS_PCLUSTER }} dest={{ efs_temp_file }}
      when: delete_efs == "true" and efs_temp_dir is defined

    - name: Set the EFS file system mountpoint value from the temp file
      shell: >
        cat {{ efs_temp_file }} | jq '.ansible_facts.efs[].filesystem_address' | tr -d \"
      register: efs_pcluster_mount_point
      when: delete_efs == "true" and efs_temp_dir is defined

    - name: Delete the EFS file system associated with this cluster
      efs:
        state: absent
        name: "{{ efs_fs_pcluster }}"
      when: delete_efs == "true" and efs_temp_dir is defined

    - name: Delete the EFS security group associated with this cluster
      ec2_group:
        name: pcluster-{{ cluster_name }}-efs
        state: absent
        region: "{{ region }}"
      when: delete_efs == "true" and efs_temp_dir is defined

    - name: Delete the EFS temp directory
      file: path="{{ efs_temp_dir }}" state=absent
      when: delete_efs == "true" and efs_temp_dir is defined

    - name: Parse the FSxL file system ID
      shell: >
        aws --region {{ region }} fsx describe-file-systems | jq '.FileSystems[] | select( any (.Tags[]; .Key == "ClusterSerialNumber" and .Value == "{{ cluster_serial_number }}"))' | jq '.FileSystemId' | tr -d \"
      register: fsx_fsid
      when: 'delete_fsx == "true"'

    - debug:
        msg: "Deleting fsx_fsid = {{ fsx_fsid.stdout }}..."
      when: 'delete_fsx == "true" and fsx_fsid.stdout != ""'

    - name: Delete the FSxL file system and wait for it to completely disappear before proceeding
      shell: sh {{ fsx_delete_fs_script }} {{ fsx_fsid.stdout }}
      when: 'delete_fsx == "true" and fsx_fsid.stdout != ""'

    - name: Delete the FSxL security group associated with this cluster
      ec2_group:
        name: pcluster-{{ cluster_name }}-fsx
        state: absent
        region: "{{ region }}"
      when: 'delete_fsx == "true" and fsx_fsid.stdout != ""'

    - name: Delete the FSxL temp directory
      file: path="{{ fsx_temp_dir }}" state=absent
      when: 'delete_fsx == "true" and fsx_fsid.stdout != ""'

    - name: Remove all custom qsub and sbatch performance templates from the src tree
      file: path="{{ item }}" state=absent
      with_fileglob:
        - "{{ performance_template_dir }}/qsub-*.j2"
        - "{{ performance_template_dir }}/sbatch-*.j2"
      when: 'enable_hpc_performance_tests == "true"'

    - name: Delete the S3 bucket associated with this cluster
      s3_bucket:
        name: "{{ s3_bucketname }}"
        state: absent
        force: yes
      when: 'delete_s3_bucketname == "true"'

    - name: Stop the timer and record how long the cluster took to destroy
      command: date +%Y-%m-%d\ \@\ %H:%M:%S
      register: stop_delete_timer

    - name: Check for the existence of cluster_data_dir
      stat: path="{{ cluster_data_dir }}"
      register: isdir_cdd

    - name: Template the cluster destruction summary report to be sent via SNS
      template:
        src: "{{ sns_destruction_summary_report_src }}"
        dest: "{{ sns_destruction_summary_report_dest }}"
        mode: 0755
      when: isdir_cdd.stat.isdir is defined and isdir_cdd.stat.isdir

    - name: Distribute the cluster destruction summary report via SNS
      sns:
        msg: "{{ lookup('file', '{{ sns_destruction_summary_report_dest }}') }}"
        subject: "Cluster Destruction Notice: {{ cluster_name }}"
        topic: sns_alerts_{{ cluster_name }}
        region: "{{ region }}"
      when: isdir_cdd.stat.isdir is defined and isdir_cdd.stat.isdir
      delegate_to: localhost

    - name: Delete the SNS topic associated with this cluster
      sns_topic:
        name: "sns_alerts_{{ cluster_name }}"
        region: "{{ region }}"
        state: absent
        subscriptions:
          - endpoint: "{{ cluster_owner_email }}"
            protocol: "email"
      when: isdir_cdd.stat.isdir is defined and isdir_cdd.stat.isdir

    - name: Delete the cluster data directory
      file:
        path: "{{ cluster_data_dir }}"
        state: absent
      when: isdir_cdd.stat.isdir is defined and isdir_cdd.stat.isdir

    - debug:
         msg:
          - "================================================================="
          - ""
          - "Initiated shutdown of {{ cluster_name }} on {{ start_delete_timer.stdout }}"
          - "Completed shutdown of {{ cluster_name }} on {{ stop_delete_timer.stdout }}"
          - ""
          - "================================================================="
